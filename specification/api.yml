swagger: "2.0"
info:
  title: NicoNihonGeemu API
  description: A REST API for managing NicoNihonGeemu decks and access dictionnary definitions
  version: 0.1.0

paths:
  /accessToken?login="{loginParam}"&pass="{passParam}":
    get:
      summary: Returns an access token to the API
      operationId: getAccessToken
      tags:
        - authentication
      parameters:
        - name: loginParam
          in: path
          required: true
          summary: Login of the user
          schema:
            type: string
        - name: hashParam
          in: path
          required: true
          summary: Hashed password of the user
          schema:
            type: string
      responses:
        '200':
          description: The access token
          schema:
            type: object
            properties:
              access_token:
                type: string
        '401':
          description: Authentication failure
  /user:
    post:
      summary: Register a new user
      operationId: registerUser
      tags:
        - authentication
      schema:
        type: object
        properties:
          login:
            type: string
          pass:
            type: string
      responses:
        '200':
          description: 'Registration successful'
        '409':
          description: 'Already existing user'
        '400':
          description: 'Invalid identifiers'
  /dictionnary/any/{query}:
    get:
      summary: Retrieves the definitions that match the query
      operationId: fetchDefinition
      tags:
        - dictionnary
      responses:
        '200': 
          description: An array of definitions
          schema:
            type: array
            items:
              $ref: "#/definitions/Definition"
  /dictionnary/word/{query}:
    get:
      summary: Retrieves the word definitions that match the query
      operationId: fetchWordDefinition
      tags:
        - dictionnary
      responses:
        '200':
          description: An array of definitions
          schema:
            type: array
            items:
              $ref: '#/definitions/Definition'
  /dictionnary/kanji/{query}:
    get:
      summary: Retrieves the kanji meanings that match the query
      operationId: fetchKanjiDefinition
      tags:
        - dictionnary
      responses:
        '200':
          description: An array of definitions
          schema:
            type: array
            items:
              $ref: '#/definitions/Definition'
  /deck:
    get:
      summary: Retrieves the user's decks
      operationId: fetchDecks
      tags:
        - deck
      responses:
        '200':
          description: An array of decks
          schema:
            type: array
            items:
              $ref: '#/definitions/Deck'
    post:
      summary: Creates a new deck
      operationId: createDeck
      tags:
        - deck
      schema:
        type: object
        properties:
          name:
            type: string
      responses:
        '200':
          description: 'Deck creation successful'
        '409':
          description: 'Already existing deck'
        '400':
          description: 'Invalid name'
  /deck/{deckId}:
    get:
      summary: Retrieves the deck corresponding to the given id
      operationId: fetchDeck
      tags:
        - deck
      responses:
        '200':
          description: The deck corresponding to the given id
          schema:
            $ref: '#/definitions/Deck'
        '404':
          description: Deck not found
    put:
      summary: Modifies a deck's metadata
      operationId: modifyDeck
      tags:
        - deck
      parameters:
      - in: body
        name: deckMetadata
        required: true
        schema:
          $ref: '#/definitions/DeckMetadata'
      responses:
        '200':
          description: Modifies a deck's metadata
        '404':
          description: Deck not found



definitions:
  Definition:
    properties:
      name:
        type: string
      definition:
        type: string
  DeckMetadata:
    properties:
      name:
        type: string
  Deck:
    properties:
      metadata:
        schema:
          $ref: '#/definitions/DeckMetadata'
      cardList:
        type: array
        items:
          $ref: '#/definitions/Card'
  Card:
    properties:
      front:
        type: string
      back:
        type: string

