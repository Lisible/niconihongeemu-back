swagger: "2.0"
info:
  title: NicoNihonGeemu API
  description: A REST API for managing NicoNihonGeemu decks and access dictionnary definitions
  version: 0.1.0

paths:
  /authentication/accessToken:
    post:
      summary: Returns an access token to the API
      operationId: getAccessToken
      tags:
        - authentication
      consumes:
        - application/json
      parameters:
        - in: body
          name: credentials
          description: The credentials of the user who wants an access token
          schema:
            type: object
            required:
              - login
              - password
            properties:
              login:
                type: string
              password:
                type: string
      responses:
        '200':
          description: The access token
          schema:
            type: object
            properties:
              access_token:
                type: string
        '401':
          description: Authentication failed
        '404':
          description: User doesn't exist
  /authentication/user:
    post:
      summary: Register a new user
      operationId: registerUser
      tags:
        - authentication
      consumes:
        - application/json
      parameters:
        - in: body
          name: credentials
          description: The credentials of the user to be created
          schema:
            type: object
            required:
              - login
              - password
            properties:
              login:
                type: string
              password:
                type: string
      responses:
        '200':
          description: Registration successful
        '409':
          description: Already existing user
        '400':
          description: Invalid identifiers
  /dictionnary/any/{query}:
    get:
      summary: Retrieves the definitions that match the query
      operationId: fetchDefinition
      tags:
        - dictionnary
      responses:
        '200': 
          description: An array of definitions
  /dictionnary/word/{query}:
    get:
      summary: Retrieves the word definitions that match the query
      operationId: fetchWordDefinition
      tags:
        - dictionnary
      responses:
        '200':
          description: An array of definitions
  /dictionnary/kanji/{query}:
    get:
      summary: Retrieves the kanji meanings that match the query
      operationId: fetchKanjiDefinition
      tags:
        - dictionnary
      responses:
        '200':
          description: An array of definitions
  /deck:
    get:
      summary: Retrieves the user's decks
      operationId: fetchDecks
      tags:
        - deck
      parameters:
        - in: query
          name: access_token
          rquired: true
          schema:
            type: string
          description: The access token of the user making the query
      responses:
        '200':
          description: An array of decks
          schema:
            $ref: '#/definitions/ArrayOfDecks'
    post:
      summary: Creates a new deck
      operationId: createDeck
      tags:
        - deck
      consumes:
        - application/json
      parameters:
        - in: body
          name: name
          description: The name of the deck to be created
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
        - in: query
          name: access_token
          required: true
          schema:
            type: string
          description: The access token of the user making the query
      responses:
        '200':
          description: Deck creation successful
        '409':
          description: Already existing deck
        '400':
          description: Invalid name
  /deck/{deckId}:
    get:
      summary: Retrieves the deck corresponding to the given id
      operationId: fetchDeck
      tags:
        - deck
      parameters:
      - in: path
        name: deckId
        required: true
        schema:
          type: string
        description: The id of the deck to retrieve
      - in: query
        name: access_token
        required: true
        schema:
          type: string
        description: The access token of the user making the query
      responses:
        '200':
          description: The deck corresponding to the given id deckId
          schema:
            $ref: '#/definitions/Deck'
        '403':
          description: Deck access not allowed
        '404':
          description: Deck not found
    put:
      summary: Edits a deck's name
      operationId: editDeck
      tags:
        - deck
      consumes:
        - application/json
      parameters:
        - in: body
          name: name
          description: The new name for the deck
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
        - in: path
          name: deckId
          required: true
          type: string
          description: The id of the deck to modify
        - in: query
          name: access_token
          required: true
          schema:
            type: string
          description: The access token of the user making the query
      responses:
        '200':
          description: Modifies a deck's metadata
        '403':
          description: Deck access not allowed
        '404':
          description: Deck not found
    delete:
      summary: Deletes the deck with the given id
      operationId: deleteDeck
      tags:
        - deck
      parameters:
      - in: path
        name: deckId
        requied: true
        type: string
        description: The id of the deck to delete
      - in: query
        name: access_token
        required: true
        schema:
          type: string
        description: The access token of the user making the query
      responses:
        '200':
          description: Deck successfully deleted
        '403':
          description: Deck access not allowed
        '404':
          description: Deck not found
  /deck/{deckId}/cards/:
    get:
      summary: Retrieves a deck's cards
      operationId: getDeckCards
      tags:
        - deck
      parameters:
      - in: path
        name: deckId
        required: true
        description: The id of the deck
        type: string
      - in: query
        name: access_token
        required: true
        schema:
          type: string
        description: The access token of the user making the query
      responses:
        '200':
          description: The array of cards of the deck
          schema:
            $ref: '#/definitions/ArrayOfCards'
        '403':
          description: Deck access not allowed
        '404':
          description: Deck not found
    post:
      summary: Adds a card to a deck
      operationId: insertCard
      tags:
        - deck
      parameters:
      - in: body
        name: cardValues
        description: The front and back of the card to add to the deck
        schema:
          type: object
          required:
            - front
            - back
          properties:
            front:
              type: string
            back:
              type: string
      - in: query
        name: access_token
        required: true
        schema:
          type: string
        description: The access token of the user making the query
      - in: path
        name: deckId
        description: The id of the deck
        type: string
      responses:
        '200':
          description: Card successfully added
        '403':
          description: Deck access not allowed
        '404':
          description: Deck not found
  /deck/{deckId}/cards/{cardId}:
    get:
      summary: Returns the card with the given id
      operationId: getDeckCard
      tags:
        - deck
      parameters:
      - in: path
        name: deckId
        description: The id of the deck
        type: string
      - in: path
        name: cardId
        description: The id of the card
        type: string
      - in: query
        name: access_token
        required: true
        schema:
          type: string
        description: The access token of the user making the query
      responses:
        '200':
          description: Returns the card
          schema:
            $ref: '#/definitions/Card'
        '403':
          description: Deck access not allowed
        '404':
          description: Deck or Card not found
    put:
      summary: Edits the card with the given id
      operationId: editDeckCard
      tags:
        - deck
      parameters:
      - in: body
        name: cardValues
        description: The new front and/or back of the card
        schema:
          type: object
          properties:
            front:
              type: string
            back:
              type: string
      - in: path
        name: deckId
        description: The id of the deck
        type: string
      - in: path
        name: cardId
        description: The id of the card
        type: string
      - in: query
        name: access_token
        required: true
        schema:
          type: string
        description: The access token of the user making the query
      responses:
        '200':
          description: Card successfully edited
        '403':
          description: Deck access not allowed
        '404':
          description: Deck or Card not found
    delete:
      summary: Delete the card with the given id
      operationId: deleteDeckCard
      tags:
        - deck
      parameters:
      - in: path
        name: deckId
        description: The id of the deck
        type: string
      - in: path
        name: cardId
        description: The id of the card
        type: string
      - in: query
        name: access_token
        required: true
        schema:
          type: string
        description: The access token of the user making the query
      responses:
        '200':
          description: Card successfully deleted
        '403':
          description: Deck access not allowed
        '404':
          description: Deck or Card not found

definitions:
  Definition:
    properties:
      name:
        type: string
      definition:
        type: string
  ArrayOfDecks:
    type: array
    items:
      $ref: '#/definitions/Deck'
  Deck:
    properties:
      id:
        type: string
      name:
        type: string
      cardList:
        $ref: '#/definitions/ArrayOfCards'
  ArrayOfCards:
    type: array
    items:
      $ref: '#/definitions/Card'
  Card:
    properties:
      id:
        type: string
      front:
        type: string
      back:
        type: string
      nextRevisionDate:
        type: integer
      streak:
        type: integer

